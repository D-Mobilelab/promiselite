(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.PromiseLite=f()}})(function(){var define,module,exports;return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){var PROMISE_STATUS={0:"pending",1:"fulfilled",2:"rejected"};var PASS=function(arg){return arg};var PrivatePromise=function(executor,nextProm){if(typeof executor!=="undefined"&&typeof executor!=="function"){throw"PromiseLite :: executor must be a function, got "+typeof executor}var promiseInstance=this;var promiseStatusIndex=0;var promiseValue;var promiseReason;var next=nextProm||[];var getValue=function(){return promiseValue};var getReason=function(){return promiseReason};this.isPending=function(){return promiseStatusIndex===0};this.isFulfilled=function(){return promiseStatusIndex===1};this.isRejected=function(){return promiseStatusIndex===2};this.isSettled=function(){return promiseStatusIndex===1||promiseStatusIndex===2};this.getStatus=function(){return PROMISE_STATUS[promiseStatusIndex]};var immediatelyFulfill=function(success,error){return new PrivatePromise(function(res,rej){try{res(success(getValue()))}catch(err){if(error==PASS&&next.length==0){throw err}else{rej(error(err))}}},next)};var immediatelyReject=function(error){return new PrivatePromise(function(res,rej){rej(error(getReason()))},next)};this.resolve=function(value){if(promiseStatusIndex===1){return}promiseStatusIndex=1;promiseValue=value;if(next.length>0){var toDo=next.shift();immediatelyFulfill(toDo.onSuccess,toDo.onError)}};this.reject=function(reason){if(promiseStatusIndex===2){return}promiseStatusIndex=2;promiseReason=reason;if(next.length>0){var toDo=next.shift();immediatelyReject(toDo.onError)}};var addNext=function(onSuccess,onError){if(typeof onError==="undefined"){onError=PASS}if(typeof onSuccess==="undefined"){onSuccess=PASS}next.push({onSuccess:onSuccess,onError:onError})};this.then=function(onSuccess,onError){if(promiseInstance.isPending()){addNext(onSuccess,onError);return promiseInstance}if(promiseInstance.isFulfilled()){return immediatelyFulfill(onSuccess,onError)}if(promiseInstance.isRejected()){return immediatelyReject(onError)}};this.fail=function(onError){return promiseInstance.then(undefined,onError)};if(typeof executor==="function"){executor(promiseInstance.resolve,promiseInstance.reject)}};var PublicPromise=function(executor){return new PrivatePromise(executor)};PublicPromise.all=function(promiseList){var promiseAll=new PublicPromise;var promiseCount=promiseList.length;var results=new Array(promiseCount);var reasons=new Array(promiseCount);var fulfilled=new Array(promiseCount);var checkAllFulfilled=function(){var counted=0;for(var key in fulfilled){counted++;if(!fulfilled[key]){promiseAll.reject(reasons);return}}if(counted==promiseCount){promiseAll.resolve(results)}};var promise;for(var i=0;i<promiseList.length;i++){promise=promiseList[i];(function(num,prom){prom.then(function(value){fulfilled[num]=true;results[num]=value;checkAllFulfilled()}).fail(function(reason){fulfilled[num]=false;reasons[num]=reason;checkAllFulfilled()})})(i,promise)}return promiseAll};PublicPromise.race=function(promiseList){var promiseRace=new PublicPromise;var promiseCount=promiseList.length;var results=new Array(promiseCount);var reasons=new Array(promiseCount);var promise;for(var i=0;i<promiseList.length;i++){promise=promiseList[i];(function(num,prom){prom.then(function(value){results[num]=value;promiseRace.resolve(results)}).fail(function(reason){reasons[num]=reason;promiseRace.reject(reasons)})})(i,promise)}return promiseRace};PublicPromise.any=function(promiseList){var promiseAny=new PublicPromise;var promiseCount=promiseList.length;var rejected=new Array(promiseCount);var reasons=new Array(promiseCount);var values=new Array(promiseCount);var allRejected=function(){for(var j=0;j<promiseCount;j++){if(!rejected[j]){return false}}return true};var promise;for(var i=0;i<promiseList.length;i++){promise=promiseList[i];(function(num,prom){prom.then(function(value){values[num]=value;promiseAny.resolve(values)}).fail(function(reason){rejected[num]=true;reasons[num]=reason;if(allRejected()){promiseAny.reject(reasons)}})})(i,promise)}return promiseAny};module.exports=PublicPromise},{}]},{},[1])(1)});
